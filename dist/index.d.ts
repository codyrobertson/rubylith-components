export { AdapterConfig, Capability, CapabilityMatch, CapabilityNegotiation, CapabilityType, CompatibilityLevel, Component, ComponentDependency, ComponentId, ComponentLifecycle, ComponentMount, ComponentProvides, ComponentRequires, ComponentSchema, ComponentType, Contract, ContractValidation, DeploymentConfig, Environment, EnvironmentHealth, EnvironmentSnapshot, EnvironmentStatus, LayoutSystem, Metadata, MountMode, MountPlan, MountPlanDiff, MountPlanExecution, MountPlanStatus, Profile, ProfilePermission, ProfileScope, ProfileSharing, ProfileTemplate, ResourceConstraints, RuntimeFramework, RuntimeRequirements, StyleEngine, StyleEngineConfig, ThemeToken, ThemeVariant, Timestamp, VersionRange, VersionString } from './types.js';
export { ValidationError, ValidationResult, capabilitySchema, capabilityTypeSchema, compatibilityLevelSchema, componentDependencySchema, componentIdSchema, componentLifecycleSchema, componentProvidesSchema, componentRequiresSchema, componentSchema, componentSchemaDefinition, componentTypeSchema, contractSchema, contractValidationSchema, createValidationError, deploymentConfigSchema, environmentHealthSchema, environmentSchema, environmentStatusSchema, layoutSystemSchema, metadataSchema, mountModeSchema, mountPlanStatusSchema, profilePermissionSchema, profileScopeSchema, resourceConstraintsSchema, runtimeFrameworkSchema, runtimeRequirementsSchema, safeValidateCapability, safeValidateComponent, safeValidateContract, safeValidateEnvironment, styleEngineConfigSchema, styleEngineSchema, themeTokenSchema, themeVariantSchema, timestampSchema, validateCapability, validateComponent, validateContract, validateEnvironment, versionRangeSchema, versionStringSchema } from './validation.js';
export { ParsedVersion, ReleaseType, VersionCompatibilityLevel, VersionError, areVersionsCompatible, compareVersions, createCaretRange, createExactRange, createMaxRange, createMinRange, createTildeRange, filterSatisfying, getCompatibilityLevel, getLatestVersion, incrementVersion, isValidVersion, isValidVersionRange, isVersionEqual, isVersionGreater, isVersionGreaterOrEqual, isVersionLess, isVersionLessOrEqual, maxSatisfying, minSatisfying, parseVersion, safeParseVersion, safeSatisfiesRange, safeValidateVersion, satisfiesRange, sortVersionsAsc, sortVersionsDesc, validateVersion, validateVersionRange } from './utils.js';
export { SemVer } from 'semver';
import 'zod';

declare const version = "0.1.0";

export { version };
